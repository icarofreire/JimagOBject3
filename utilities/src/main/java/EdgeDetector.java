/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jimagobject.utilities;

import jimagobject.utilities.Picture;
import java.awt.Color;
import java.awt.image.BufferedImage;

/**
 * https://introcs.cs.princeton.edu/java/31datatype/EdgeDetector.java.html
 */
public final class EdgeDetector {
    // truncate color component to be between 0 and 255
    public int truncate(int a) {
        if      (a <   0) return 0;
        else if (a > 255) return 255;
        else              return a;
    }

    /**
     * Returns the monochrome luminance of the given color as an intensity
     * between 0.0 and 255.0 using the NTSC formula
     * Y = 0.299*r + 0.587*g + 0.114*b. If the given color is a shade of gray
     * (r = g = b), this method is guaranteed to return the exact grayscale
     * value (an integer with no floating-point roundoff error).
     *
     * @param color the color to convert
     * @return the monochrome luminance (between 0.0 and 255.0)
     */
    public double intensity(Color color) {
        int r = color.getRed();
        int g = color.getGreen();
        int b = color.getBlue();
        // return 0.299*r + 0.587*g + 0.114*b;
        return (299*r + 587*g + 114*b) / 1000.0;  // to avoid floating-point issues
    }

    public Picture apply(BufferedImage image) {
        int[][] filter1 = {
            { -1,  0,  1 },
            { -2,  0,  2 },
            { -1,  0,  1 }
        };

        int[][] filter2 = {
            {  1,  2,  1 },
            {  0,  0,  0 },
            { -1, -2, -1 }
        };

        /**
         * Picture.java
         * https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Picture.java.html
         */
        Picture picture0 = new Picture(image);
        int width    = picture0.width();
        int height   = picture0.height();
        Picture picture1 = new Picture(width, height);


        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // get 3-by-3 array of colors in neighborhood
                int[][] gray = new int[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        gray[i][j] = (int) intensity(picture0.get(x-1+i, y-1+j));
                    }
                }

                // apply filter
                int gray1 = 0, gray2 = 0;
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        gray1 += gray[i][j] * filter1[i][j];
                        gray2 += gray[i][j] * filter2[i][j];
                    }
                }
                // int magnitude = 255 - truncate(Math.abs(gray1) + Math.abs(gray2));
                int magnitude = 255 - truncate((int) Math.sqrt(gray1*gray1 + gray2*gray2));
                Color grayscale = new Color(magnitude, magnitude, magnitude);
                picture1.set(x, y, grayscale);
            }
        }
        // picture0.show();
        // picture1.show();
        // picture1.save("baboon-edge.jpg");
        return picture1;
    }

    public Picture apply(byte[] bytesImage, int width, int height, boolean imagesPadroes) {

        int[][] filter1 = {
            { -1,  0,  1 },
            { -2,  0,  2 },
            { -1,  0,  1 }
        };

        int[][] filter2 = {
            {  1,  2,  1 },
            {  0,  0,  0 },
            { -1, -2, -1 }
        };

        /**
         * Picture.java
         * https://algs4.cs.princeton.edu/code/edu/princeton/cs/algs4/Picture.java.html
         */
        Picture picture0 = new Picture(bytesImage, width, height, imagesPadroes);
        // int width    = picture0.width();
        // int height   = picture0.height();
        Picture picture1 = new Picture(width, height);


        for (int y = 1; y < height - 1; y++) {
            for (int x = 1; x < width - 1; x++) {

                // get 3-by-3 array of colors in neighborhood
                int[][] gray = new int[3][3];
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        gray[i][j] = (int) intensity(picture0.get(x-1+i, y-1+j));
                    }
                }

                // apply filter
                int gray1 = 0, gray2 = 0;
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        gray1 += gray[i][j] * filter1[i][j];
                        gray2 += gray[i][j] * filter2[i][j];
                    }
                }
                // int magnitude = 255 - truncate(Math.abs(gray1) + Math.abs(gray2));
                int magnitude = 255 - truncate((int) Math.sqrt(gray1*gray1 + gray2*gray2));
                Color grayscale = new Color(magnitude, magnitude, magnitude);
                picture1.set(x, y, grayscale);
            }
        }
        // picture0.show();
        // picture1.show();
        // picture1.save("baboon-edge.jpg");
        return picture1;
    }

}