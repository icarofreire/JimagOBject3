/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jimagobject.utilities;

import java.io.File;
import java.io.FileWriter;
import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Map;
import java.util.TreeSet;
import java.util.Vector;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

import jimagobject.utilities.ReadImages;
import jimagobject.utilities.Picture;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.nio.file.Path;
import java.nio.file.Paths;

public final class WriteObj {

    private final ReadImages read = new ReadImages();

    public void getVertex() {

        // String dirImages = "/home/icaro/Downloads/dicom/ABDOMEN/VOL_ARTERIAL_0004";
        String dirImages = "/home/icaro/Downloads/dicom/teste/teste2";
        // String dirImages = "/home/icaro/Downloads/dicom/teste/teste3";

        File dir = new File(dirImages);
        if(dir.exists()){
            // read.read(dir);
            read.read(dir);
            // read.read(dir);
            Vector<byte[]> vbytesImages = read.getVbytesImages();

            testeInstanciaDICOM(vbytesImages);

        }else{
            System.out.println("Diretório de imagens não existe;");
        }

    }

    /** teste em exibir uma instância de imagem dicom convertendo para
     * imagem e aplicando o edge;
     */
    public void testeInstanciaDICOM(Vector<byte[]> vbytesImages){
        int instance = 0;
        Vector<int[]> rowsColumns = read.getVRowsColumnsImages();
        int rows = rowsColumns.get(instance)[0];
        int columns = rowsColumns.get(instance)[1];
        Picture pic = new Picture(vbytesImages.get(instance), columns, rows);
        pic.display();
    }

    public void write(Vector<byte[]> vbytesImages) {
        String fObj = "teste.obj";
        File logCheck = new File(fObj);
        FileWriter myWriter = null;
        try {
            myWriter = new FileWriter(fObj, false);
        } catch (IOException e) { e.printStackTrace(); }

        applyDimensionsImg(vbytesImages, myWriter);

        try {
            myWriter.close();
        } catch (IOException e) { e.printStackTrace(); }
    }

    public void applyDimensionsImg(Vector<byte[]> vbytesImages, FileWriter myWriter){
        int z = 0;
        double spaceBetweenLayers = 0.005;
        double xCoordScale = 0.01;
        double yCoordScale = 0.01;
        double sliceThickness = read.getSliceThickness();
        EdgeDetector edge = new EdgeDetector();
        for(byte[] pixels : vbytesImages){
            /** \/ aplicação do edge detection; */
            Picture picEdgeDetect = edge.apply(pixels);
            for (int y = 1; y < picEdgeDetect.height() - 1; y++) {
                for (int x = 1; x < picEdgeDetect.width() - 1; x++) {

                    Color cor = picEdgeDetect.get(x, y);
                    int argb = picEdgeDetect.getRGB(x, y);
                    int alpha =  (argb >> 24) & 0xFF;
                    if (alpha == 255 && cor.equals(Color.black) ){
                        // x y z;
                        if(myWriter != null){
                            try {
                                myWriter.write("v " + (x) + " " + (y) + " " + z + "\n");
                            } catch (IOException e) { e.printStackTrace(); }
                        }
                    }
                }
            }
            z += 1; // sliceThickness
        }
    }

}