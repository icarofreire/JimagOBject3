/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package jimagobject.utilities;

import java.io.File;
import java.util.HashSet;
import java.util.HashMap;
import java.util.TreeMap;
import java.util.Map;
import java.util.TreeSet;
import java.util.Vector;
import java.util.Collections;
import java.util.LinkedHashMap;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;

/*\/ parse dicom; */
import AC_DicomIO.AC_DcmStructure;
import AC_DicomIO.AC_DicomReader;

public final class ReadImages {

    private final HashMap<File, byte[]> filesBytes = new HashMap<File, byte[]>();
    private final HashMap<Long, byte[]> instanceNumberFileBytes = new HashMap<Long, byte[]>();
    private final Vector<byte[]> vbytesImages = new Vector<byte[]>();

    public void read(File dirImages) {
        if(dirImages.exists()){
            File[] files = dirImages.listFiles();
            for(File img: files){
                if(img.getName().indexOf(".dcm") != -1 || img.getName().indexOf(".DCM") != -1){
                    LinkedHashMap<Integer, String[]> atributesDicom = parseDicomBreak(img);
                    if(atributesDicom != null){
                        String instanceNumber = (atributesDicom.containsKey((0x0020 << 16 | 0x0013))) ? (atributesDicom.get((0x0020 << 16 | 0x0013))[1]) : (null);

                        InputStream imgStream = fileToInputStream(img);
                        if(instanceNumber != null && imgStream != null){
                            try{
                                byte[] bytesImg = imgStream.readAllBytes();
                                filesBytes.put(img, bytesImg);

                                instanceNumberFileBytes.put(Long.parseLong(instanceNumber), bytesImg);
                            }catch(IOException e){}
                        }
                    }

                }
            }
            TreeMap<Long, byte[]> sorted = hashSetToTreeMap();
            readSortedDicoms(sorted);
        }
    }

    // public HashMap<String, byte[]> getInstanceNumberFileBytes() {
    //     return instanceNumberFileBytes;
    // }

    public Vector<byte[]> getVbytesImages() {
        return vbytesImages;
    }

    public TreeMap<Long, byte[]> hashSetToTreeMap() {
        TreeMap<Long, byte[]> sorted = new TreeMap<>();
        sorted.putAll(instanceNumberFileBytes);
        return sorted;
    }

    public void readSortedDicoms(TreeMap<Long, byte[]> sorted) {
        System.out.println("images:");
        for (Map.Entry<Long, byte[]> entry : sorted.entrySet()){
            System.out.println("Key = " + entry.getKey() + ", Value = " + entry.getValue()); 
            byte[] bytes = entry.getValue();
            vbytesImages.add(bytes);
        }
    }

    private InputStream fileToInputStream(File initialFile){
        InputStream targetStream = null;
        try{
            targetStream = new FileInputStream(initialFile);
        }catch(IOException e){}
        return targetStream;
    }

    private final LinkedHashMap<Integer, String[]> parseDicom(File dicom) {
        LinkedHashMap<Integer, String[]> attr = null;
        final AC_DicomReader dicomReader = new AC_DicomReader();
        dicomReader.readDCMFile(dicom.getAbsolutePath());
        try {
            final AC_DcmStructure dcmStructure = dicomReader.getAttirbutes();
            if(dcmStructure != null){
                attr = dcmStructure.getAttributes();
            }else{
                /*\/ not dicom(.dcm/.ima) file; */
                // System.out.println(">> [NULL];");
            }
        } catch (java.io.IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return attr;
    }

    private final LinkedHashMap<Integer, String[]> parseDicomBreak(File dicom) {
        LinkedHashMap<Integer, String[]> attr = null;
        final AC_DicomReader dicomReader = new AC_DicomReader();
        dicomReader.setTagBreak(0x0020, 0x0013);
        dicomReader.readDCMFile(dicom.getAbsolutePath());
        try {
            final AC_DcmStructure dcmStructure = dicomReader.getAttirbutes();
            if(dcmStructure != null){
                attr = dcmStructure.getAttributes();
            }else{
                /*\/ not dicom(.dcm/.ima) file; */
                // System.out.println(">> [NULL];");
            }
        } catch (java.io.IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        return attr;
    }

}